{"version":3,"sources":["components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faAngleLeft","faAngleRight","faArrowsAltH","faArrowsAltV","Menu","_ref","height","width","backgroundColor","cellColor","menuVisible","handleChange","handleSubmit","handleBackgroundColor","handleCellColor","handleMenuVisible","menu","react_default","a","createElement","className","id","react_fontawesome_index_es","icon","type","name","min","value","onChange","onClick","es","onChangeComplete","color","button","size","Fragment","App","props","_useState","useState","_useState2","Object","slicedToArray","setHeight","_useState3","_useState4","setWidth","_useState5","_useState6","background","setBackground","_useState7","_useState8","setCellColor","_useState9","_useState10","mouseDown","setMouseDown","_useState11","_useState12","setMenuVisible","_useState13","#f44336","_useState14","colors","setColors","handleCellColorOnClick","event","target","style","document","getElementById","innerHTML","concat","handleMouseState","components_Menu","console","log","preventDefault","canvas","querySelector","x","row","appendChild","y","cell","hex","tmpColors","objectSpread","keys","length","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","onDoubleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0afcee77.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { CirclePicker } from 'react-color';\nimport '../App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleLeft, faAngleRight, faArrowsAltH, faArrowsAltV } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faAngleLeft, faAngleRight, faArrowsAltH, faArrowsAltV);\n\nconst Menu = ( {height, width, backgroundColor, cellColor, menuVisible, handleChange, handleSubmit, handleBackgroundColor, handleCellColor, handleMenuVisible} ) => {\n\tconst menu = (<div className=\"App-Settings\">\n\n                <h2>Canvas Settings</h2>\n                {/*<h3>Choose Grid Size</h3>*/}\n                <form id=\"sizePicker\">\n                  <label>\n                  <FontAwesomeIcon icon=\"arrows-alt-v\" /> Grid Height:\n                  <input\n                    type=\"number\"\n                    id=\"input_height\"\n                    name=\"height\"\n                    min=\"1\"\n                    value={height}\n                    onChange={handleChange} />\n                  </label>\n                  <br />\n                  <label>\n                  <FontAwesomeIcon icon=\"arrows-alt-h\" /> Grid Width:\n                  <input\n                    type=\"number\"\n                    id=\"input_width\"\n                    name=\"width\"\n                    min=\"1\"\n                    value={width}\n                    onChange={handleChange} />\n                  </label>\n                  <p>\n                  <input\n                    type=\"submit\"\n                    id=\"input_submit\"\n                    value=\"Create grid\"\n                    onClick={handleSubmit} />\n                  </p>\n                </form>\n\n                <hr className=\"Separator\" />\n\n                <h3>Pick A Background Color</h3>\n                <CirclePicker\n                  onChangeComplete={handleBackgroundColor}\n                  color={ backgroundColor }\n                />\n\n                <hr className=\"Separator\" />\n\n                <h3>Pick A Color</h3>\n                <CirclePicker\n                  onChangeComplete={handleCellColor}\n                  color={ cellColor }\n                />\n                <p>Hint: Double click to remove a color</p>\n              </div>);\n\n\tconst button = (\n\t\t<div className={menuVisible ? \"mobile-menu menu-open\" : \"mobile-menu menu-closed\"}>\n            <button className=\"show-settings\" onClick={handleMenuVisible}>\n              {menuVisible\n                ? <FontAwesomeIcon icon=\"angle-left\" size=\"lg\" />\n                : <FontAwesomeIcon icon=\"angle-right\" size=\"lg\" />\n              }\n            </button>\n        </div>\n\t)\n\n\tif (menuVisible) {\n\t\treturn (\n\t\t<>\n\t\t\t{menu}\n\t\t\t{button}\n\t\t</>\n\t\t)\n\t} \n\treturn button\n}\n\nexport default Menu","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faAngleLeft, faAngleRight, faArrowsAltH, faArrowsAltV } from '@fortawesome/free-solid-svg-icons';\nimport Menu from './components/Menu';\n\nlibrary.add(faAngleLeft, faAngleRight, faArrowsAltH, faArrowsAltV);\n\nconst App = (props) => {\n\n    const [height, setHeight] = useState(15)\n    const [width, setWidth] = useState(15)\n    const [background, setBackground] = useState('#fff')\n    const [cellColor, setCellColor] = useState('#f44336')\n    const [mouseDown, setMouseDown] = useState(false)\n    const [menuVisible, setMenuVisible] = useState(true)\n    const [colors, setColors] = useState({ '#f44336': 1 })\n\n  const handleChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    switch(name) {\n      case 'width':\n        setWidth(value);\n        break;\n      case 'height':\n        setHeight(value);\n        break;\n      default:\n        console.log('errr');\n    }\n  }\n  \n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const canvas = document.querySelector(\"#pixel_canvas\");\n    canvas.innerHTML = '';\n    setBackground('#fff');\n    setCellColor('#f44336')\n    setColors({ '#f44336': 1 })\n\n    for (let x = 0; x < height; x++) {\n      let row = document.createElement(\"tr\");\n      canvas.appendChild(row);\n\n      for (let y = 0; y < width; y++) {\n        let cell = document.createElement(\"td\");\n        cell.id = `cell-${x}-${y}`\n        row.appendChild(cell);\n      }\n    }\n  }\n\n  // Cell color\n  const handleCellColor = (color) => {\n    setCellColor(color.hex);\n    if (!colors[color.hex]) {\n      const tmpColors = { ...colors };\n      tmpColors[color.hex] = Object.keys(colors).length + 1\n      setColors(tmpColors);\n    }\n  }\n\n  const handleCellColorOnClick = (event) => {\n    event.target.style.backgroundColor = cellColor;\n    if (document.getElementById(event.target.id)) {\n      document.getElementById(event.target.id).innerHTML = `<p class='cell-num noselect'>${colors[cellColor]}</p>`;\n    }\n      setMouseDown(true);\n  }\n\n  const handleMouseState = () => {\n    setMouseDown(false);\n  }\n\n  // Table background color\n  const handleBackgroundColor = (color) => {\n    setBackground(color.hex);\n  };\n\n  // Remove color\n  const handleColorRemove = (event) => {\n    event.target.style.backgroundColor = '';\n  }\n\n  const handleMenuVisible = () => {\n    setMenuVisible(!menuVisible);\n  }\n\n  // TODO: Separate into single components\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        <h1>Pixel Art Maker</h1>\n      </header>\n\n      <div className=\"App-Content\">\n        <Menu \n        height={height}\n        width={width}\n        backgroundColor={background}\n        cellColor={cellColor}\n        menuVisible={menuVisible}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n        handleBackgroundColor={handleBackgroundColor}\n        handleCellColor={handleCellColor}\n        handleMenuVisible={handleMenuVisible}\n        />\n\n        <div className={menuVisible ? \"Canvas\" : \"Canvas full-width\"}>\n          <h2>Design Canvas</h2>\n          <table\n            id=\"pixel_canvas\"\n            style={{backgroundColor: background}}\n            onMouseDown={handleCellColorOnClick}\n            onMouseMove={mouseDown ? handleCellColorOnClick : null}\n            onMouseUp={handleMouseState}\n            onMouseLeave={handleMouseState}\n            onTouchStart={handleCellColorOnClick}\n            onTouchMove={mouseDown ? handleCellColorOnClick : null}\n            onTouchEnd={handleMouseState}\n            onDoubleClick={handleColorRemove}>\n          </table>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}